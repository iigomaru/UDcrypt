using UdonSharp;
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon;
using System;

public class ChaCha20 : UdonSharpBehaviour
{

    public static byte[] _Block(UInt32[] key, UInt32[] nonce, UInt32 counter)
    {
        // Sets the constant
        UInt32 output00 = 0x61707865U; //"expa"
        UInt32 output01 = 0x3320646eU; //"nd 3"
        UInt32 output02 = 0x79622d32U; //"2-by"
        UInt32 output03 = 0x6b206574U; //"te k"
        // Sets up the key
        UInt32 output04 = key[0];
        UInt32 output05 = key[1];
        UInt32 output06 = key[2];
        UInt32 output07 = key[3];
        UInt32 output08 = key[4];
        UInt32 output09 = key[5];
        UInt32 output10 = key[6];
        UInt32 output11 = key[7];
        // block counter
        UInt32 output12 = counter;
        // nonce
        UInt32 output13 = nonce[0];
        UInt32 output14 = nonce[1];
        UInt32 output15 = nonce[2];

        UInt32 w00 = output00;
        UInt32 w01 = output01;
        UInt32 w02 = output02;
        UInt32 w03 = output03;
        UInt32 w04 = output04;
        UInt32 w05 = output05;
        UInt32 w06 = output06;
        UInt32 w07 = output07;
        UInt32 w08 = output08;
        UInt32 w09 = output09;
        UInt32 w10 = output10;
        UInt32 w11 = output11;
        UInt32 w12 = output12;
        UInt32 w13 = output13;
        UInt32 w14 = output14;
        UInt32 w15 = output15;

        {
            UInt32 v;
            //Round 1
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            }            

            //Round 2
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 3
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 4
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 5
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 6
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 7
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 8
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 9
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 

            //Round 10
            {
                    {
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v << 16) | (v >> (16));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v << 12) | (v >> (20));
                        w00 = w00 + w04; v =(w12 ^ w00); w12 = (v <<  8) | (v >> (24));
                        w08 = w08 + w12; v =(w04 ^ w08); w04 = (v <<  7) | (v >> (25));
                    }

                    {
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v << 16) | (v >> (16));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v << 12) | (v >> (20));
                        w01 = w01 + w05; v = (w13 ^ w01); w13 = (v <<  8) | (v >> (24));
                        w09 = w09 + w13; v = (w05 ^ w09); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v << 16) | (v >> (16));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v << 12) | (v >> (20));
                        w02 = w02 + w06; v = (w14 ^ w02); w14 = (v <<  8) | (v >> (24));
                        w10 = w10 + w14; v = (w06 ^ w10); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v << 16) | (v >> (16));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v << 12) | (v >> (20));
                        w03 = w03 + w07; v = (w15 ^ w03); w15 = (v <<  8) | (v >> (24));
                        w11 = w11 + w15; v = (w07 ^ w11); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v << 16) | (v >> (16));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v << 12) | (v >> (20));
                        w00 = w00 + w05; v = (w15 ^ w00); w15 = (v <<  8) | (v >> (24));
                        w10 = w10 + w15; v = (w05 ^ w10); w05 = (v <<  7) | (v >> (25));
                    }
                    {
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v << 16) | (v >> (16));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v << 12) | (v >> (20));
                        w01 = w01 + w06; v = (w12 ^ w01); w12 = (v <<  8) | (v >> (24));
                        w11 = w11 + w12; v = (w06 ^ w11); w06 = (v <<  7) | (v >> (25));
                    }
                    {
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v << 16) | (v >> (16));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v << 12) | (v >> (20));
                        w02 = w02 + w07; v = (w13 ^ w02); w13 = (v <<  8) | (v >> (24));
                        w08 = w08 + w13; v = (w07 ^ w08); w07 = (v <<  7) | (v >> (25));
                    }
                    {
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v << 16) | (v >> (16));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v << 12) | (v >> (20));
                        w03 = w03 + w04; v = (w14 ^ w03); w14 = (v <<  8) | (v >> (24));
                        w09 = w09 + w14; v = (w04 ^ w09); w04 = (v <<  7) | (v >> (25));
                    }
            } 
        }

        {
            w00 = output00 + w00;
            w01 = output01 + w01;
            w02 = output02 + w02;
            w03 = output03 + w03;
            w04 = output04 + w04;
            w05 = output05 + w05;
            w06 = output06 + w06;
            w07 = output07 + w07;
            w08 = output08 + w08;
            w09 = output09 + w09;
            w10 = output10 + w10;
            w11 = output11 + w11;
            w12 = output12 + w12;
            w13 = output13 + w13;
            w14 = output14 + w14;
            w15 = output15 + w15;
        }


        // converts the 16 UInt32 words to LE byte array
        byte[] outputArray = new byte[64];
        {
            outputArray[00] = (byte)((w00 << 24) >> 24);
            outputArray[01] = (byte)((w00 << 16) >> 24);
            outputArray[02] = (byte)((w00 <<  8) >> 24);
            outputArray[03] = (byte) (w00 >> 24);
        }
        {
            outputArray[04] = (byte)((w01 << 24) >> 24);
            outputArray[05] = (byte)((w01 << 16) >> 24);
            outputArray[06] = (byte)((w01 <<  8) >> 24);
            outputArray[07] = (byte) (w01 >> 24);
        }
        {
            outputArray[08] = (byte)((w02 << 24) >> 24);
            outputArray[09] = (byte)((w02 << 16) >> 24);
            outputArray[10] = (byte)((w02 <<  8) >> 24);
            outputArray[11] = (byte) (w02 >> 24);
        }
        {
            outputArray[12] = (byte)((w03 << 24) >> 24);
            outputArray[13] = (byte)((w03 << 16) >> 24);
            outputArray[14] = (byte)((w03 <<  8) >> 24);
            outputArray[15] = (byte) (w03 >> 24);
        }
        {
            outputArray[16] = (byte)((w04 << 24) >> 24);
            outputArray[17] = (byte)((w04 << 16) >> 24);
            outputArray[18] = (byte)((w04 <<  8) >> 24);
            outputArray[19] = (byte) (w04 >> 24);
        }
        {
            outputArray[20] = (byte)((w05 << 24) >> 24);
            outputArray[21] = (byte)((w05 << 16) >> 24);
            outputArray[22] = (byte)((w05 <<  8) >> 24);
            outputArray[23] = (byte) (w05 >> 24);
        }
        {
            outputArray[24] = (byte)((w06 << 24) >> 24);
            outputArray[25] = (byte)((w06 << 16) >> 24);
            outputArray[26] = (byte)((w06 <<  8) >> 24);
            outputArray[27] = (byte) (w06 >> 24);
        }
        {
            outputArray[28] = (byte)((w07 << 24) >> 24);
            outputArray[29] = (byte)((w07 << 16) >> 24);
            outputArray[30] = (byte)((w07 <<  8) >> 24);
            outputArray[31] = (byte) (w07 >> 24);
        }
        {
            outputArray[32] = (byte)((w08 << 24) >> 24);
            outputArray[33] = (byte)((w08 << 16) >> 24);
            outputArray[34] = (byte)((w08 <<  8) >> 24);
            outputArray[35] = (byte) (w08 >> 24);
        }
        {
            outputArray[36] = (byte)((w09 << 24) >> 24);
            outputArray[37] = (byte)((w09 << 16) >> 24);
            outputArray[38] = (byte)((w09 <<  8) >> 24);
            outputArray[39] = (byte) (w09 >> 24);
        }
        {
            outputArray[40] = (byte)((w10 << 24) >> 24);
            outputArray[41] = (byte)((w10 << 16) >> 24);
            outputArray[42] = (byte)((w10 <<  8) >> 24);
            outputArray[43] = (byte) (w10 >> 24);
        }
        {
            outputArray[44] = (byte)((w11 << 24) >> 24);
            outputArray[45] = (byte)((w11 << 16) >> 24);
            outputArray[46] = (byte)((w11 <<  8) >> 24);
            outputArray[47] = (byte) (w11 >> 24);
        }
        {
            outputArray[48] = (byte)((w12 << 24) >> 24);
            outputArray[49] = (byte)((w12 << 16) >> 24);
            outputArray[50] = (byte)((w12 <<  8) >> 24);
            outputArray[51] = (byte) (w12 >> 24);
        }
        {
            outputArray[52] = (byte)((w13 << 24) >> 24);
            outputArray[53] = (byte)((w13 << 16) >> 24);
            outputArray[54] = (byte)((w13 <<  8) >> 24);
            outputArray[55] = (byte) (w13 >> 24);
        }
        {
            outputArray[56] = (byte)((w14 << 24) >> 24);
            outputArray[57] = (byte)((w14 << 16) >> 24);
            outputArray[58] = (byte)((w14 <<  8) >> 24);
            outputArray[59] = (byte) (w14 >> 24);
        }
        {
            outputArray[60] = (byte)((w15 << 24) >> 24);
            outputArray[61] = (byte)((w15 << 16) >> 24);
            outputArray[62] = (byte)((w15 <<  8) >> 24);
            outputArray[63] = (byte) (w15 >> 24);
        }

        return outputArray;
    }

    public static byte[] _Encrypt(UInt32[] key, UInt32[] nonce, UInt32 counter, byte[] plaintext)
    {
        byte[] keyStream = new byte[64];
        byte[] block = new byte[64];
        byte[] encryptedMessage = new byte[plaintext.Length];
        for (int j = 0; j <= ((plaintext.Length)/64) - 1; j++) 
        {
            keyStream = _Block(key, nonce, counter + (UInt32)(j));
            Array.ConstrainedCopy(plaintext, j*64, block, 0, 64);
            for (int k = 0; k < 64; k++)
            {
                block[k] = (byte)(block[k] ^ keyStream[k]);
            }
            Array.ConstrainedCopy(block, 0, encryptedMessage, j*64, 64);
        }
        if ((plaintext.Length % 64) != 0)
        {
            int j = (int)((plaintext.Length)/64);
            keyStream = _Block(key, nonce, counter + (UInt32)(j));
            Array.ConstrainedCopy(plaintext, j*64, block, 0, (plaintext.Length % 64));
            for (int k = 0; k < (plaintext.Length % 64); k++)
            {
                block[k] = (byte)(block[k] ^ keyStream[k]);
            }
            Array.ConstrainedCopy(block, 0, encryptedMessage, j*64, (plaintext.Length % 64));
        }
        return encryptedMessage;
    }

}
